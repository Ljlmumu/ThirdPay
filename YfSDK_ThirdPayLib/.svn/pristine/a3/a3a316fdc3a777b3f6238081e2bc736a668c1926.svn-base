package com.yifu.platform.single.net;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

import com.yifu.platform.single.YFErrorCode;
import com.yifu.platform.single.codec.AES;
import com.yifu.platform.single.json.AbstractJSONHelper;
import com.yifu.platform.single.json.AbstractJsonBuilder;
import com.yifu.platform.single.net.INetListener.DownLoadStatus;
import com.yifu.platform.single.net.NetMessage.NetMessageType;
import com.yifu.platform.single.net.response.BaseResult;
import com.yifu.platform.single.util.MyLogger;

import android.os.Handler;
import android.os.Message;
import android.util.Log;

public class HttpImpl implements IHttpInterface {

	private MyLogger mLogger = MyLogger.getLogger(HttpImpl.class.getName());
	private HashMap<ASIHttpRequest, INetListener> mRequestQueue;
	private volatile Handler mHandler;

	HttpImpl() {
		mRequestQueue = new HashMap<ASIHttpRequest, INetListener>(10);
		mHandler = new HttpMsgHandler();
	}

	public int sendRequest(String url, int requestTag, String bodydata, INetListener listener) {
		mLogger.d(requestTag + "---请求体为 == " + bodydata);
		
		ASIHttpRequest request = new ASIHttpRequest();
		request.setUrl(url);
		// 加密
		AES myaes = AES.getInstance();
		String encryptData = myaes.aesEncrypt(bodydata);
		
		request.setRequestData(encryptData);
		request.setRequestTag(requestTag);
		request.setTimeOutSeconds(10 * 1000);
		request.setCbkHandler(mHandler);
		// add to task queue
		addTaskToQueue(request, listener);

		return request.hashCode();
	}

	public int sendDownLoadRequest(String url, String filepath, INetListener listener) {

		// create a new request and set request param
		// and then add the request to queue
		ASIHttpRequest request = new ASIHttpRequest();
		request.setUrl(url);
		request.setDownloadDstFilePath(filepath);
		request.setTimeOutSeconds(10 * 1000);
		request.setCbkHandler(mHandler);

		// add to task queue
		addTaskToQueue(request, listener);

		return request.hashCode();
	}

	public void cancelRequestById(int requestId) {

		Iterator<Entry<ASIHttpRequest, INetListener>> iter = mRequestQueue.entrySet().iterator();

		while (iter.hasNext()) {
			Entry<ASIHttpRequest, INetListener> entry = (Entry<ASIHttpRequest, INetListener>) iter.next();

			ASIHttpRequest request = (ASIHttpRequest) entry.getKey();

			// check if current request match specify request id
			if (requestId == request.hashCode()) {

				// set end flag to specify request
				request.cancelRequest();
				// add by wenzutong, 2012-09-04,从mRequestQueue中移除该request对象
				mRequestQueue.remove(request);
				// end
				break;
			}
		}
	}

	public void cancelAllRequest() {
		Iterator<Entry<ASIHttpRequest, INetListener>> iter = mRequestQueue.entrySet().iterator();

		while (iter.hasNext()) {
			Entry<ASIHttpRequest, INetListener> entry = (Entry<ASIHttpRequest, INetListener>) iter.next();

			ASIHttpRequest request = (ASIHttpRequest) entry.getKey();

			request.cancelRequest();
		}

		// remove all request in the queue
		mRequestQueue.clear();
	}

	/**
	 * Add task to the task queue
	 * 
	 * @param request
	 * @param listener
	 */
	private void addTaskToQueue(ASIHttpRequest request, INetListener listener) {

		mRequestQueue.put(request, listener);
		// HttpClientHelper.submit(request);
		HttpClientHelper.execute(request);
	}

	/**
	 * Remove task from the task queue
	 * 
	 * @param request
	 */
	private void removeTask(ASIHttpRequest request) {

		boolean _exist = mRequestQueue.containsKey(request);

		if (_exist) {
			mRequestQueue.remove(request);
		}
	}

	/*
	 * @ get net listener by net request id
	 */
	private Entry<ASIHttpRequest, INetListener> findRequestListenerById(int requestid) {

		Entry<ASIHttpRequest, INetListener> resEntry = null;
		Iterator<Entry<ASIHttpRequest, INetListener>> iter = mRequestQueue.entrySet().iterator();

		while (iter.hasNext()) {
			Entry<ASIHttpRequest, INetListener> entry = (Entry<ASIHttpRequest, INetListener>) iter.next();

			ASIHttpRequest request = (ASIHttpRequest) entry.getKey();

			// check if current request match specify request id
			if (requestid == request.hashCode()) {

				resEntry = entry;
				break;
			}
		}

		return resEntry;
	}

	private final class HttpMsgHandler extends Handler {

		@Override
		public void handleMessage(Message msg) {

			boolean res = msg.obj.getClass().equals(NetMessage.class);
			if (res) {
				NetMessage netmsg = (NetMessage) msg.obj;
				NetMessageType netmsgtype = netmsg.getMessageType();
				mLogger.d("metmsgtype = " + netmsgtype);
				switch (netmsgtype) {
				case NetSuccess: {
					doNetSucessResponse(netmsg);
				}
					break;

				case NetFailure: {
					doNetFailureResponse(netmsg);
				}
					break;

				case NetDownloadling: {
					doDownloadProgressResponse(netmsg);
				}
					break;

				case NetDownloadFailure: {
					doDownLoadFailureResponse(netmsg);
				}
					break;

				case NetDownloadSuccess: {
					doDownloadSuccessResponse(netmsg);
				}
					break;

				case NetCancel: {
					doCancelResponse(netmsg);
				}
					break;

				default:
					break;

				}
			}
		}

		private void doNetSucessResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);

			if (entry != null) {

				INetListener _listener = entry.getValue();
				ASIHttpRequest _request = entry.getKey();
				int _requestid = entry.getKey().hashCode();

				BaseResult res = message.getResponseData();
				if (res != null)
					mLogger.d("response data res = " + res.toString());
				if (res == null) {

					int errcode = message.getErrorCode();

					if (_listener != null)
						_listener.onNetResponseErr(_request.getRequestTag(), _requestid, errcode,
								message.getErrorString());

				} else {

					int errcode = res.getErrorCode();
					mLogger.d("response data isn't nil and errcode = " + errcode + " ,requestTag = "
							+ _request.getRequestTag());
					if (errcode == YFErrorCode.DC_OK) {
						if (_listener != null)
							_listener.onNetResponse(_request.getRequestTag(), res, _requestid);

					} else {
						if (_listener != null)
							_listener.onNetResponseErr(_request.getRequestTag(), _requestid, errcode,
									res.getErrorString());
					}
				}
				removeTask(entry.getKey());
			}
		}

		private void doNetFailureResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);

			if (entry != null) {
				INetListener _listener = entry.getValue();
				ASIHttpRequest _request = entry.getKey();
				// TODO
				// need handle the net error for more detail
				if (_listener != null)
					_listener.onNetResponseErr(_request.getRequestTag(), requestid, message.getErrorCode(),
							message.getErrorString());

				removeTask(entry.getKey());
			}

		}

		private void doDownLoadFailureResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);

			if (entry != null) {
				INetListener _listener = entry.getValue();
				if (_listener != null)
					_listener.onDownLoadStatus(DownLoadStatus.EDlsDownLoadErr, requestid);
				removeTask(entry.getKey());
			}

		}

		private void doDownloadProgressResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);
			if (entry != null) {
				INetListener _listener = entry.getValue();
				if (_listener != null)
					_listener.onDownLoadProgressCurSize(message.getCurentSize(), message.getTotalSize(), requestid);

			}
		}

		private void doDownloadSuccessResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);

			if (entry != null) {
				INetListener _listener = entry.getValue();
				if (_listener != null)
					_listener.onDownLoadStatus(DownLoadStatus.EDlsDownLoadComplete, requestid);
				removeTask(entry.getKey());
			}

		}

		private void doCancelResponse(NetMessage message) {
			int requestid = message.getRequestId();
			Entry<ASIHttpRequest, INetListener> entry = HttpImpl.this.findRequestListenerById(requestid);

			if (entry != null) {

				// TODO
				// do nothing for now
				removeTask(entry.getKey());
			}
		}

	}

	@Override
	public int sendRequest(String url, int requestTag, String content, INetListener listener,
			AbstractJSONHelper jsonHelper) {
		mLogger.v("请求参数为 == " + content);
		ASIHttpRequest request = new ASIHttpRequest(jsonHelper, mHandler);
		request.setUrl(url);
		// 加密
		AES myaes = AES.getInstance();
		String encryptData = myaes.aesEncrypt(content);

		request.setRequestData(encryptData);

		request.setRequestTag(requestTag);

		request.setTimeOutSeconds(10 * 1000);
		// add to task queue
		addTaskToQueue(request, listener);

		return request.hashCode();
	}

	@Override
	public int sendRequest(AbstractJsonBuilder jsonBuilder, INetListener listener, AbstractJSONHelper jsonHelper) {
		// TODO Auto-generated method stub
		return sendRequest(jsonBuilder.getUrl(), jsonBuilder.getRequestTag(), jsonBuilder.buildJson(), listener,
				jsonHelper);
	}

}
